@model Dealogikal.ViewModel.AccountViewModel

@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var name = ViewBag.Name;
}

@{
    // Get server time in SGT
    var serverTime = TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.UtcNow, "Singapore Standard Time");
}
<link href="~/Assets/css/AdminDashboard.css" rel="stylesheet" />

@if (Model.dtr != null)
{
    <input type="hidden" id="timeIn" value="@(Model.dtr.timeIn.HasValue ? Model.dtr.timeIn.Value.ToString("HH:mm") : "")" />
    <input type="hidden" id="breakIn" value="@(Model.dtr.breakIn.HasValue ? Model.dtr.breakIn.Value.ToString("HH:mm") : "")" />
    <input type="hidden" id="breakOut" value="@(Model.dtr.breakOut.HasValue ? Model.dtr.breakOut.Value.ToString("HH:mm") : "")" />
    <input type="hidden" id="timeOut" value="@(Model.dtr.timeOut.HasValue ? Model.dtr.timeOut.Value.ToString("HH:mm") : "")" />
}
else
{
    <input type="hidden" id="timeIn" value="" />
    <input type="hidden" id="breakIn" value="" />
    <input type="hidden" id="breakOut" value="" />
    <input type="hidden" id="timeOut" value="" />
}

<div class="dashboard-wrapper">
    <div class="content-wrapper">
        <div class="row">
            <h2 class="font-weight-bold text-left">Welcome @name</h2>

            <!-- CARD CONTAINER -->
            <div class="col-md-12 d-flex flex-column align-items-start dashboard-container">

                <!-- CLOCK + FORM SECTION -->
                <div class="d-flex flex-wrap align-items-center justify-content-between w-100 dashboard-row">

                    <!-- CLOCK -->
                    <div class="d-flex flex-column align-items-center clock-container">
                        <canvas id="analogClock" width="200" height="200"></canvas>
                        <div id="digitalClock" class="digital-clock"></div>
                        <div id="liveDate" class="live-date"></div>
                    </div>

                    <!-- FORM CONTROLS -->
                    <form class="form-sample d-flex flex-column align-items-center" action="@Url.Action("Dtr", "Admin")" method="post">
                        <input type="hidden" name="recordId" value="@(Model.dtr != null ? Model.dtr.recordId : 0)" />

                        <div class="d-flex flex-column align-items-center gap-2 button-section">
                            <select id="workMode" class="form-control w-100 text-center mb-2" name="workMode" required>
                                @if (Model.dtr != null && Model.dtr.recordId > 0)
                                {
                                    <option value="Onsite" @(Model.dtr.workMode == "Onsite" ? "selected" : "")>Onsite</option>
                                }
                                else
                                {
                                    <option value="Onsite">Onsite</option>
                                }
                            </select>

                            <div class="button-group">
                                <button type="submit" id="btn1" class="btn btn-primary" name="action" value="" style="min-width:200px;">Time In</button>
                            </div>
                        </div>
                    </form>

                    <!-- PENDING REQUESTS (Info Boxes Section) -->
                    <div class="info-boxes-container">
                        <div class="info-box">
                            <a href="~/Admin/Accounts">Total Employees:</a>
                            <a href="~/Admin/Accounts">@Model.employeeInfos.Count(m => m.status == 1)</a>
                        </div>
                        <div class="info-box">
                            <a href="~/Admin/EmployeeDtr">Total Late Today:</a>
                            <a href="~/Admin/EmployeeDtr">@ViewBag.LateEmployeesCount</a>
                        </div>
                        <div class="info-box">
                            <a href="~/Admin/Accounts">Overtime Requests:</a>
                            <a href="~/Admin/Accounts">@Model.overtimeRequests.Count(o => o.status == 0)</a>
                        </div>
                        <div class="info-box">
                            <a href="~/Admin/Accounts">Leave Request:</a>
                            <a href="~/Admin/Accounts">@Model.leaveRequests.Count(l => l.status == 0)</a>
                        </div>
                    </div>

                </div>

                <!-- DTR TABLE -->
                <div class="table-container" style="overflow:scroll;">
                    <table class="table table-bordered text-center">
                        <thead>
                            <tr>
                                <th rowspan="2">Date</th>
                                <th colspan="2">Morning</th>
                                <th colspan="2">Afternoon</th>
                                <th rowspan="2">Work Mode</th>
                            </tr>
                            <tr>
                                <th>Time In</th>
                                <th>Time Out</th>
                                <th>Time In</th>
                                <th>Time Out</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.dtr != null)
                            {
                                <tr>
                                    <td>@Model.dtr.date.ToString("dd MMM yyyy")</td>
                                    <td class="@(Model.dtr.timeIn.HasValue && Model.dtr.timeIn.Value.TimeOfDay > new TimeSpan(8, 5, 0) ? "late-time" : "")">
                                        @(Model.dtr.timeIn.HasValue ? Model.dtr.timeIn.Value.ToString("hh:mm tt") : "")
                                    </td>
                                    <td>@(Model.dtr.breakIn.HasValue ? Model.dtr.breakIn.Value.ToString("hh:mm tt") : "")</td>
                                    <td>@(Model.dtr.breakOut.HasValue ? Model.dtr.breakOut.Value.ToString("hh:mm tt") : "")</td>
                                    <td>@(Model.dtr.timeOut.HasValue ? Model.dtr.timeOut.Value.ToString("hh:mm tt") : "")</td>
                                    <td>@Model.dtr.workMode</td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td>@DateTime.Now.ToString("dd MMM yyyy")</td>
                                    <td colspan="5">No records</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    function updateButton() {
        const now = getSyncedNow();
        const currentHour = now.getHours();
        const currentMinute = now.getMinutes();

        const timeIn = $('#timeIn').val();
        const breakIn = $('#breakIn').val();
        const breakOut = $('#breakOut').val();
        const timeOut = $('#timeOut').val();

        const btn1 = $('#btn1');


        if (currentHour === 12 && currentMinute >= 16 && currentMinute <= 44) {
            btn1.text("Break").prop("disabled", true);
        }
        else if (currentHour < 12 || (currentHour === 12 && currentMinute <= 15)) {
            // 🌅 Morning Shift
            if (!timeIn) {
                btn1.text("Time In").val("TimeIn").prop("disabled", false);
            } else if (timeIn && !breakIn) {
                btn1.text("Time Out/ Break In").val("BreakIn").prop("disabled", false);
            } else {
                btn1.prop("disabled", true);
            }
        }
        else if (currentHour > 12 || (currentHour === 12 && currentMinute >= 45)) {
            // 🌇 Afternoon Shift
            if (!breakOut) {
                btn1.text("Time In/ Break Out").val("BreakOut").prop("disabled", false);
            } else if (breakOut && !timeOut) {
                btn1.text("Time Out").val("TimeOut").prop("disabled", false);
            } else {
                btn1.prop("disabled", true);
            }
        }
    }

    $(document).ready(function () {
        updateButton();
        setInterval(updateButton, 1000);
    });
</script>

<script>
    function updateClock() {
        const now = getSyncedNow();

        now.setMinutes(now.getMinutes() + 3);
        now.setSeconds(now.getSeconds() + 29);

        let hours = now.getHours();
        const minutes = now.getMinutes();
        const seconds = now.getSeconds();
        const ampm = hours >= 12 ? 'PM' : 'AM';

        hours = hours % 12 || 12;

        document.getElementById("digitalClock").textContent =
            `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} ${ampm}`;

        document.getElementById("liveDate").textContent = now.toDateString();

        if (typeof drawAnalogClock === "function") {
            drawAnalogClock(hours, minutes, seconds);
        }
    }

    setInterval(updateClock, 1000);
    updateClock();

    function drawAnalogClock(hours, minutes, seconds) {
        const canvas = document.getElementById("analogClock");
        const ctx = canvas.getContext("2d");

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.save();
        ctx.translate(canvas.width / 2, canvas.height / 2);

        function drawHand(length, width, angle, color = "black") {
            ctx.save();
            ctx.rotate(angle * (Math.PI / 180));
            ctx.strokeStyle = color;
            ctx.lineWidth = width;
            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(0, -length);
            ctx.stroke();
            ctx.restore();
        }

        drawHand(50, 6, (hours % 12) * 30 + minutes * 0.5);
        drawHand(70, 4, minutes * 6);
        drawHand(90, 2, seconds * 6, "red");

        ctx.restore();
    }
    setInterval(updateClock, 1000);
</script>

<script>
    document.getElementById("btn1").addEventListener("click", function (e) {
        const confirmed = confirm("Are you sure you want to time out?");
        if (!confirmed) {
            e.preventDefault(); // Stop the form from submitting
        }
    });
</script>
<script>
    // Injected server time as base reference
    const serverTime = new Date("@serverTime.ToString("yyyy-MM-ddTHH:mm:ss")");
    const clientLoadTime = Date.now(); // Reference point to simulate ticking

    function getSyncedNow() {
        return new Date(serverTime.getTime() + (Date.now() - clientLoadTime));
    }
</script>
