@model Dealogikal.ViewModel.AccountViewModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Reset Password</title>
    <link rel="stylesheet" href="https://unpkg.com/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://unpkg.com/bs-brain@2.0.4/components/logins/login-3/assets/css/login-3.css">
    <link rel="icon" type="image/png" sizes="32x32" href="/Assets/img/dealogikal.png">
    <link rel="shortcut icon" href="~/Assets/img/dealogikal-logo.ico" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        .colored-toast .swal2-popup {
            padding: 0.5rem 1rem !important;
            border-radius: 10px !important;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2) !important;
            font-size: 0.85rem !important;
            min-width: 250px !important;
        }

        .colored-toast .swal2-title {
            margin: 0 !important;
            font-size: 0.85rem !important;
        }

        .swal2-container {
            width: auto !important;
        }
  
        body {
            background: url('/Assets/img/background.jpg') no-repeat center center fixed;
            background-size: cover;
        }

        .login-container {
            max-width: 850px;
            min-height: 450px;
            border-radius: 12px;
            overflow: hidden;
            background: rgba(255, 255, 255, 0.90);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
            position: relative;
            z-index: 10;
        }
    </style>
</head>

<body class="d-flex align-items-center justify-content-center min-vh-100">
    <input type="hidden" name="ReturnUrl" value="@ViewBag.ReturnUrl" />
    <div class="container login-container p-4">
        <div class="row">
            <!-- Logo Section -->
            <div class="col-md-6 d-flex flex-column justify-content-center p-4">
                <a class="mx-auto my-3" href="http://www.dealogikal.com" target="_blank"><img class="img-fluid rounded" loading="lazy" src="~/Assets/img/dealogikal-logo.png" width="245" height="80" alt="Dealogikal Logo"></a>
                <a class="mx-auto my-3" href="http://www.knotticalpower.com" target="_blank"><img class="img-fluid rounded" loading="lazy" src="~/Assets/img/kpec-logo.png" width="245" height="80" alt="KPEC Logo"></a>
            </div>
            <!-- Form Section -->
            <div class="col-md-6 p-4">
                <div class="p-3">
                    <h3 class="mb-4">Reset Password</h3>
                    <!-- Display TempData Messages -->                    
                    <form action="@Url.Action("ConfirmationPassword", "Home")" method="post">
                        <input type="hidden" class="form-control" name="employeeId" value="@Model.userAccount.employeeId" readonly>
                        <div class="mb-3">
                            <label for="newPassword">New Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control" name="password" id="password" placeholder="Enter new password" required>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="confirmNewPassword">Confirm New Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control" name="confirmpassword" id="confirmpassword" placeholder="Confirm new password" required>
                            </div>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="showPassword">
                            <label class="form-check-label" for="rememberMe">Show Password</label>
                        </div>

                        <div class="d-grid">
                            <button class="btn btn-secondary btn-xs" type="submit">Reset Password</button>
                        </div>
                    </form>
                    <hr class="mt-4">
                </div>
            </div>
        </div>
    </div>
    <!-- Login Section -->
</body>
</html>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.getElementById("showPassword").addEventListener("change", function () {
        const passwordField = document.getElementById("password");
        const passwordConfirm = document.getElementById("confirmpassword");

        if (this.checked) {
            passwordField.type = "text";
            passwordConfirm.type = "text";
        } else {
            passwordField.type = "password";
            passwordConfirm.type = "password";
        }
    });

    // Show the success toast notification and redirect after 2 seconds
    @if (TempData["Success"] != null)
    {
        <text>
            const Toast = Swal.mixin({
                toast: true,
                position: 'bottom-start', // Bottom left
                showConfirmButton: false,
                timer: 3000, 
                timerProgressBar: false,
                customClass: {
                    popup: 'colored-toast'
                },
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer);
                    toast.addEventListener('mouseleave', Swal.resumeTimer);
                }
            });

            Toast.fire({
                icon: 'success',
                title: '@TempData["Success"]'
            });

            // Redirect after 2 seconds (match the timer)
            setTimeout(function () {
                window.location.href = '@Url.Action("Login", "Home")';
            }, 3000);
        </text>
    }

    // Optional: Error toast
    @if (TempData["Error"] != null)
    {
        <text>
            const Toast = Swal.mixin({
                toast: true,
                position: 'bottom-start',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                customClass: {
                    popup: 'colored-toast'
                },
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer);
                    toast.addEventListener('mouseleave', Swal.resumeTimer);
                }
            });

            Toast.fire({
                icon: 'error',
                title: '@TempData["Error"]'
            });
        </text>
    }
</script>
